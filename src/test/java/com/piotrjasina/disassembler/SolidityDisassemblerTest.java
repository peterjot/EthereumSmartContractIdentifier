package com.piotrjasina.disassembler;

import com.piotrjasina.dto.InstructionDto;
import com.piotrjasina.mapper.InstructionMapper;
import org.junit.Before;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import static com.piotrjasina.disassembler.Opcode.PUSH4;
import static org.hamcrest.core.IsEqual.equalTo;
import static org.junit.Assert.assertThat;

public class SolidityDisassemblerTest {

    private SolidityDisassembler disassembler;

    @Before
    public void setUp() {
        disassembler = new SolidityDisassembler();
    }

    @Test
    public void shouldPUSH4CorrectWhenDisassembly() {
        //given
        String mockByteCode = "8060405234801561001057600080fd5b506100396020604051908101604052806000815250610068640100000000026401000000009004565b610063600060206040519081016040528060008152506101b3640100000000026401000000009004565b6103f2565b610070610325565b6000602060405190810160405280848152509150600160038390806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000190805190602001906100cc929190610339565b5050500390506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea81600033604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b6101bb6103b9565b600060206040519081016040528084815250915060016004839080600181540180825580915050906001820390600052602060002001600090919290919091506000820151816000019080519060200190610217929190610339565b50505003905060016000858152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea848233604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b602060405190810160405280606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061037a57805160ff19168380011785556103a8565b828001600101855582156103a8579182015b828111156103a757825182559160200191906001019061038c565b5b5090506103b591906103cd565b5090565b602060405190810160405280606081525090565b6103ef91905b808211156103eb5760008160009055506001016103d3565b5090565b90565b6109dd806104016000396000f30060806040526004361061008e576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806309787a2c146100935780630b1e7f831461010657806310fdf92a146101ac57806323bcaae9146102195780635a9cfac8146102825780638ebb4c15146102b1578063acdc2cde14610357578063cd65eabe146103b8575b600080fd5b34801561009f57600080fd5b5061010460048036038101908080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610403565b005b34801561011257600080fd5b5061013160048036038101908080359060200190929190505050610575565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610171578082015181840152602081019050610156565b50505050905090810190601f16801561019e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101b857600080fd5b506101d760048036038101908080359060200190929190505050610636565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561022557600080fd5b50610280600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610669565b005b34801561028e57600080fd5b506102976107b4565b604051808215151515815260200191505060405180910390f35b3480156102bd57600080fd5b506102dc600480360381019080803590602001909291905050506107c3565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561031c578082015181840152602081019050610301565b50505050905090810190601f1680156103495780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561036357600080fd5b506103a2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610884565b6040518082815260200191505060405180910390f35b3480156103c457600080fd5b506103ed60048036038101908080359060200190929190803590602001909291905050506108b4565b6040518082815260200191505060405180910390f35b61040b6108e4565b6000602060405190810160405280848152509150600160048390806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000190805190602001906104679291906108f8565b50505003905060016000858152602001908152602001600020819080600181540180825580915050906001820390600052602060002001600090919290919091505550336002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea848233604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a150505050565b60038181548110151561058457fe5b90600052602060002001600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561062c5780601f106106015761010080835404028352916020019161062c565b820191906000526020600020905b81548152906001019060200180831161060f57829003601f168201915b5050505050905081565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610671610978565b6000602060405190810160405280848152509150600160038390806001815401808255809150509060018203906000526020600020016000909192909190915060008201518160000190805190602001906106cd9291906108f8565b5050500390506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150509060018203906000526020600020016000909192909190915055507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea81600033604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a1505050565b60008060038054905011905090565b6004818154811015156107d257fe5b90600052602060002001600091509050806000018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561087a5780601f1061084f5761010080835404028352916020019161087a565b820191906000526020600020905b81548152906001019060200180831161085d57829003601f168201915b5050505050905081565b60006020528160005260406000208181548110151561089f57fe5b90600052602060002001600091509150505481565b6001602052816000526040600020818154811015156108cf57fe5b90600052602060002001600091509150505481565b602060405190810160405280606081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061093957805160ff1916838001178555610967565b82800160010185558215610967579182015b8281111561096657825182559160200191906001019061094b565b5b509050610974919061098c565b5090565b602060405190810160405280606081525090565b6109ae91905b808211156109aa576000816000905550600101610992565b5090565b905600a165627a7a723058203bb3e6f109f74f237f6237094c198d52cd13f61b23717cf61feba7267df14c320029";
        List<InstructionDto> expectedPush4InstructionDtos = Arrays.asList(
                new InstructionDto(PUSH4, "ffffffff"),
                new InstructionDto(PUSH4, "09787a2c"),
                new InstructionDto(PUSH4, "0b1e7f83"),
                new InstructionDto(PUSH4, "10fdf92a"),
                new InstructionDto(PUSH4, "23bcaae9"),
                new InstructionDto(PUSH4, "5a9cfac8"),
                new InstructionDto(PUSH4, "8ebb4c15"),
                new InstructionDto(PUSH4, "acdc2cde"),
                new InstructionDto(PUSH4, "cd65eabe")
        );

        //when
        List<Instruction> disassembly = disassembler.disassembly(mockByteCode);
        List<InstructionDto> actualPush4InstructionDtos =
                disassembly
                        .stream()
                        .filter(instruction -> instruction.getOpcode().equals(Opcode.PUSH4))
                        .map(InstructionMapper::convertToDto)
                        .collect(Collectors.toList());

        //then

        assertThat(actualPush4InstructionDtos.size(), equalTo(9));
        assertThat(actualPush4InstructionDtos, equalTo(expectedPush4InstructionDtos));
    }

    @Test
    public void opcodesSzie() {
        //given
        String mockByteCode = "608060405234801561001057600080fd5b5060408051602081019091526000815261003290640100000000610059810204565b6040805160208101909152600080825261005491640100000000610126810204565b6102b9565b61006161020c565b50604080516020818101909252828152600380546001818101808455600093845284518051959694959294919387937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b909101926100c392849291019061021e565b505033600081815260208181526040808320805460018101825590845282842097909603969095018690558451868152908101919091528084019190915291519293506000805160206109f38339815191529291829003606001919050a1505050565b61012e61020c565b50604080516020818101909252828152600480546001818101808455600093845284518051959694959294919387937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091019261019092849291019061021e565b5050506000868152600160208181526040808420805493840181558452818420959094039490910184905583825260028152908290208054600160a060020a0319163390811790915582518881529182018490528183015290519192506000805160206109f3833981519152919081900360600190a150505050565b60408051602081019091526060815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061025f57805160ff191683800117855561028c565b8280016001018555821561028c579182015b8281111561028c578251825591602001919060010190610271565b5061029892915061029c565b5090565b6102b691905b8082111561029857600081556001016102a2565b90565b61072b806102c86000396000f3006080604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309787a2c811461009d5780630b1e7f83146100fd57806310fdf92a1461018a57806323bcaae9146101cb5780635a9cfac8146102245780638ebb4c151461024d578063acdc2cde14610265578063cd65eabe146102a8578063e42cf919146102c3575b600080fd5b3480156100a957600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100fb9583359536956044949193909101919081908401838280828437509497506103219650505050505050565b005b34801561010957600080fd5b50610115600435610426565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014f578181015183820152602001610137565b50505050905090810190601f16801561017c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561019657600080fd5b506101a26004356104d1565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b3480156101d757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526100fb9436949293602493928401919081908401838280828437509497506104f99650505050505050565b34801561023057600080fd5b506102396105d8565b604080519115158252519081900360200190f35b34801561025957600080fd5b506101156004356105e1565b34801561027157600080fd5b5061029673ffffffffffffffffffffffffffffffffffffffff600435166024356105ef565b60408051918252519081900360200190f35b3480156102b457600080fd5b5061029660043560243561061f565b3480156102cf57600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526100fb95833595369560449491939091019190819084018382808284375094975061063a9650505050505050565b610329610652565b50604080516020818101909252828152600480546001818101808455600093845284518051959694959294919387937f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b9091019261038b928492910190610664565b505050600086815260016020818152604080842080549384018155845281842095909403949091018490558382526002815290829020805473ffffffffffffffffffffffffffffffffffffffff19163390811790915582518881529182018490528183015290519192507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea919081900360600190a150505050565b600380548290811061043457fe5b60009182526020918290200180546040805160026001841615610100026000190190931692909204601f8101859004850283018501909152808252919350918391908301828280156104c75780601f1061049c576101008083540402835291602001916104c7565b820191906000526020600020905b8154815290600101906020018083116104aa57829003601f168201915b5050505050905081565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b610501610652565b50604080516020818101909252828152600380546001818101808455600093845284518051959694959294919387937fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b90910192610563928492910190610664565b505033600081815260208181526040808320805460018101825590845282842097909603969095018690558451868152908101919091528084019190915291519293507f7694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea9291829003606001919050a1505050565b60035460001090565b600480548290811061043457fe5b60006020528160005260406000208181548110151561060a57fe5b90600052602060002001600091509150505481565b60016020528160005260406000208181548110151561060a57fe5b610642610652565b5060408051602081019091525250565b60408051602081019091526060815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106106a557805160ff19168380011785556106d2565b828001600101855582156106d2579182015b828111156106d25782518255916020019190600101906106b7565b506106de9291506106e2565b5090565b6106fc91905b808211156106de57600081556001016106e8565b905600a165627a7a723058200532add2613cc35b1d101afb17d8378aa3a24e8c7c607a11fc4edc460b7c2f9e00297694d63d2563aeac8aad2b0a111ef1ba09b12b9748ef4ae1010584d554b87fea";

        //when
        List<Instruction> disassembly = disassembler.disassembly(mockByteCode);

        System.out.println(disassembly);
        System.out.println(disassembly.size());
    }
}